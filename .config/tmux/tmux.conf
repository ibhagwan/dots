#set -g default-terminal "tmux-256color"
set -g default-terminal "screen-256color"

# enable full colors if TERM outside is xterm-256color
# this is required for using nvim's :set termguicolors
set-option -sa terminal-overrides ',xterm-256color:RGB'
set-option -sa terminal-overrides ',screen-256color:RGB'

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
# test by running over ssh:
#   printf "\033]52;c;$(printf "%s" "hello" | base64)\a"
# https://github.com/tmux/tmux/wiki/Clipboard
set -g set-clipboard on

# disabled by default with 3.3a
# https://github.com/tmux/tmux/issues/3218#issuecomment-1153404631
# https://github.com/ibhagwan/smartyank.nvim/issues/4
set -g allow-passthrough on

# set shell
set -g default-shell $SHELL

# set max history
set -g history-limit 100000

# Custom modifier key
set -g prefix C-Space
unbind-key C-b
bind-key C-Space send-prefix

# set escape time (time to wait after pressing Esc)
# to 10ms, this precents nvim delay with pressing Esc
# https://github.com/neovim/neovim/wiki/FAQ
set -sg escape-time 10

# vim autoread warning in ':checkhealth'
set-option -g focus-events on

# To copy, left click and drag to highlight text in yellow, 
# once you release left click yellow text will disappear and
# will automatically be available in clibboard

# without this mouse scroll will send up/down arrows
# instead of scrolling the terminal history
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# Disble mouse scroll (annoying as hell with mac touchpad)
# verify with `tmux list-keys | grep -i wheel`
bind-key -T root WheelUpPane    send-keys "" # or ^Y
bind-key -T root WheelDownPane  send-keys "" # or ^E

# vi-like keybindings for pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# rebind prefix+<C-o> to prefix+o as I always misclick
unbind C-o
bind C-o select-pane -l

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'M-\' if-shell "$is_vim" 'send-keys M-\\'  'select-pane -l'
bind-key -n 'M-h' if-shell "$is_vim" { send-keys M-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'M-j' if-shell "$is_vim" { send-keys M-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'M-k' if-shell "$is_vim" { send-keys M-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'M-l' if-shell "$is_vim" { send-keys M-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }

bind-key -T copy-mode-vi 'M-\' select-pane -l
bind-key -T copy-mode-vi 'M-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'M-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'M-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'M-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# 'n' is default bind 'next-window'
# bind 'b' to 'previous-window'
bind b previous-window
bind-key -n 'M-n' next-window
bind-key -n 'M-b' previous-window
bind-key -n 'M-o' select-pane -l
bind-key -n 'M-z' resize-pane -Z

# easy pane resize
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key H resize-pane -L
bind-key L resize-pane -R
bind -r left resize-pane -L 8
bind -r right resize-pane -R 8
bind -r up resize-pane -U 5
bind -r down resize-pane -D 5

# pane splits
# | - veritcal split
# " - horizontal split
bind | split-window -h
bind '"' split-window -v
# uncomment to split at current working directory
#bind | split-window -h -c "#{pane_current_path}"
#bind '"' split-window -v -c "#{pane_current_path}"

# vi-like keybindings in copy mode
setw -g mode-keys vi

# 'p' to paste buffer
# 'v' to enter copy-mode:
#   'v' to start visual mode
#   'y' to yank text
unbind p
bind p paste-buffer
bind v copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection

# 'Enter' as an alternative to 'q' to exit copy-mode-vi
unbind -T copy-mode-vi Enter
 bind-key -T copy-mode-vi Enter send-keys -X cancel
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"

# disable "release mouse drag to copy and exit copy-mode"
# ref: https://github.com/tmux/tmux/issues/140
unbind-key -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -selection c"

# source our config the file with Prefix r
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded `tmux.conf`"

# zenburn theme
setw -g clock-mode-colour colour117
setw -g mode-style fg=colour117,bg=colour238,bold
setw -g status-style bg=colour235,fg=colour248
setw -g message-style fg=colour117,bg=colour235,bold
setw -g window-status-style fg=colour68,bg=colour235
setw -g window-status-current-style fg=colour223,bg=colour237,bold

# fancy status line: user@host, date, time
set-option -g status-right "#(whoami)@#(uname -n) #[fg=colour187,bold]%a %Y-%m-%d %H:%M"
set -g status-right-length 50
set -g status-left-length 20

# tmux plugin manager:
#   <space-I> to install plugins
#   <space-U> to update plugins
#   <space-alt-U> to remove unlisted plugins
# if "test ! -d $XDG_CONFIG_HOME/tmux/plugins/tpm"
if-shell "[ ! -d '$XDG_CONFIG_HOME/tmux/plugins/tpm' ]" {
    run-shell "git clone https://github.com/tmux-plugins/tpm $XDG_CONFIG_HOME/tmux/plugins/tpm"
}

# Configure extrakto
set -g @extrakto_key "tab"
set -g @extrakto_grab_area "full"
set -g @extrakto_filter_order "path all word line"
set -g @extrakto_popup_size "80%,60%"
set -g @extrakto_open_key "ctrl-o"
set -g @extrakto_copy_key "ctrl-y"   # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection
set -g @extrakto_filter_key "ctrl-r"
set -g @extrakto_fzf_layout "default"
set -g @extrakto_split_direction "p"
set -g @extrakto_fzf_unset_default_opts "true"

# List of plugins, tpm can manage itself
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'laktak/extrakto'

run -b '$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm'

# Install plugins if needed
if-shell "[ ! -d '$XDG_CONFIG_HOME/tmux/plugins/extrakto' ]" {
    run-shell '$XDG_CONFIG_HOME/tmux/plugins/tpm/bin/clean_plugins'
    run-shell '$XDG_CONFIG_HOME/tmux/plugins/tpm/bin/install_plugins'
}
