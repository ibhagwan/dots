# Use <c-space> as our modifier
unbind-key C-b
set -g prefix C-Space
# a-shell hack
# https://github.com/holzschu/a-shell/issues/691
set -g prefix2 0xFFE0

#
# https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95
#
# curl -LO https://invisible-island.net/datafiles/current/terminfo.src.gz
# gunzip terminfo.src.gz
# tic -o $XDG_CONFIG_HOME/terminfo -xe tmux-256color $XDG_CONFIG_HOME/tmux/tmux-256color.src
#
# Generate tmux-256color terminfo if it doesn't exist and we have `tic`
if-shell "[ ! -f \"$XDG_DATA_HOME/terminfo/t/tmux-256color\" ] && command -v tic" {
    run-shell "tic -o $XDG_DATA_HOME/terminfo -xe tmux-256color $XDG_CONFIG_HOME/tmux/tmux-256color.terminfo"
}
# Set $TERM as tmux-256color if the terminfo database entry exists
# otherwise, fallback to xterm-256color (screen-256color does not support italics)
if-shell "echo $TERMINFO_DIRS | grep -v $XDG_DATA_HOME/terminfo > /dev/null " \
    { set-env -g TERMINFO_DIRS $XDG_DATA_HOME/terminfo:$TERMINFO_DIRS }
if-shell 'infocmp tmux-256color' { set default-terminal tmux-256color } \
    { set default-terminal xterm-256color }

# Enable RGB (truecolor) for vim/nvim `:set termguicolors`
set -a terminal-features '*:RGB'

# Enable colored underlines (e.g. in vim)
set -a terminal-features '*:usstyle'

# Allow applications in the terminal to set the system clipboard
# Enables OSC 52 clipboard,test by running over ssh:
#   printf "\033]52;c;$(printf "%s" "hello" | base64)\a"
# https://github.com/tmux/tmux/wiki/Clipboard
set -g set-clipboard on

# disabled by default with 3.3a
# https://github.com/tmux/tmux/issues/3218#issuecomment-1153404631
set -g allow-passthrough on
# https://github.com/ibhagwan/smartyank.nvim/issues/4

# Use extended keys (CSI u)
set extended-keys on

# set max history
set -g history-limit 100000

# set escape time (time to wait after pressing Esc)
# to 10ms, this precents nvim delay with pressing Esc
# https://github.com/neovim/neovim/wiki/FAQ
set -sg escape-time 10

# vim autoread warning in ':checkhealth'
set-option -g focus-events on

# Allow tmux to set the title of the terminal emulator
set -g set-titles on
set -g set-titles-string '#T #{session_alerts}'

# Using `default-command $SHELL` with `default-shell /bin/sh` will cause new
# tmux windows to be spawned using
#
#       /bin/sh -c $SHELL
#
# This ensures that new windows are created as non-login interactive shells
# set -g default-shell /bin/sh
# if-shell 'command -v zsh' { set -g default-command zsh } { set -g default-command $SHELL }
set -g default-shell $SHELL

# Use readline (emacs) keys on the tmux command line
set -g status-keys emacs

# Vim-like keybindings in copy mode
set -g mode-keys vi

# Enable mouse with certain exceptions below
# To copy, left click and drag to highlight text and press y to yank
set -g mouse on

# without this mouse scroll will send up/down arrows
# instead of scrolling the terminal history
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" \
    "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# Disable mouse scroll locally (annoying as hell with a touchpad)
# verify with `tmux list-keys | grep -E "root\s*Wheel.*Pane"`
if-shell "[ -z '$SSH_TTY' ]" {
    bind-key -T root WheelUpPane    send-keys "" # or ^Y
    bind-key -T root WheelDownPane  send-keys "" # or ^E
}

# Mouse binding adjustments for copy-mode
# disable "release mouse drag to copy and exit copy-mode"
# ref: https://github.com/tmux/tmux/issues/140#issuecomment-474341833
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -selection c"
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# since MouseDragEnd1Pane neither exit copy-mode nor clear selection now,
# let single click do selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# this line changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
bind -n MouseDrag1Pane if -Ft= '#{mouse_any_flag}' \
    'if -Ft= \"#{pane_in_mode}\" \"copy-mode -eM\" \"send-keys -M\"' 'copy-mode -eM'


# pane splits
# prefix + \ or | for vertical split
# prefix + - or _ for horizontal split
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind | split-window -f -h -c "#{pane_current_path}"
bind _ split-window -f -v -c "#{pane_current_path}"

# vi-like keybindings for pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# rebind prefix+<C-o> to prefix+o as I always misclick
unbind C-o
bind C-o select-pane -l

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'M-o' if-shell "$is_vim" 'send-keys M-o'  'select-pane -l'
bind-key -n 'M-h' if-shell "$is_vim" { send-keys M-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'M-j' if-shell "$is_vim" { send-keys M-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'M-k' if-shell "$is_vim" { send-keys M-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'M-l' if-shell "$is_vim" { send-keys M-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }

bind-key -T copy-mode-vi 'M-o' select-pane -l
bind-key -T copy-mode-vi 'M-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'M-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'M-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'M-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# 'n' is default bind 'next-window'
# bind 'b' to 'previous-window'
bind b previous-window
bind-key -n 'M-n' next-window
bind-key -n 'M-b' previous-window
bind-key -n 'M-z' resize-pane -Z
# Used in neovim smart pane switch
# bind-key -n 'M-o' select-pane -l

# easy pane resize
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key H resize-pane -L
bind-key L resize-pane -R
bind -r left resize-pane -L 8
bind -r right resize-pane -R 8
bind -r up resize-pane -U 5
bind -r down resize-pane -D 5

# p to paste buffer
# v to enter copy-mode:
# v to start visual mode
# C-v to toggle "block mode"
# y to yank text
unbind p
bind p paste-buffer
bind v copy-mode
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

# Enter as an alternative to 'q' to exit copy-mode-vi
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X cancel
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"

# Use incremental search (a-la vim's n/N)
bind -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -p "(search down)" \
    { send -X search-forward-incremental '%%%' }
bind -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -p "(search up)" \
    { send -X search-backward-incremental '%%%' }

# Search directly from "normal" mode
bind / {
    copy-mode
    command-prompt -i -p "(search up)" { send -X search-backward-incremental '%%%' }
}

# source our config the file with Prefix r
bind r source-file "$HOME/.config/tmux/tmux.conf" \; display "Reloaded `tmux.conf`"

## Switch session using tmux's menu
# bind-key g run-shell "$HOME/.config/tmux/session-menu"
bind g display-popup -E "\
    tmux list-sessions -F '#{session_name}#{?session_attached,\t<<,}' |\
    fzf --height=100% --reverse -m --header=switch-session --delimiter='\t' \
        --preview-window=nohidden:right:60% --preview 'tmux capture-pane -pt {1}'|\
    xargs -I {} tmux switch-client -t {}"

# Switch to last used client
bind O switch-client -l

# Prompt for new session name and create it
bind C command-prompt -p "session name:" { new-session -A -s '%%' }

# Kill session
bind X confirm-before -p "kill session? (y/n)" kill-session

# zenburn theme
setw -g clock-mode-colour colour117
setw -g mode-style fg=colour117,bg=colour238,bold
setw -g status-style bg=colour235,fg=colour248
setw -g message-style fg=colour117,bg=colour235,bold
setw -g window-status-style fg=colour68,bg=colour235
setw -g window-status-current-style fg=colour223,bg=colour237,bold

# Status line
set -g status-left ""
set -g status-right "#[#{E:@prefix-style}]#{?client_prefix, ^SPC ,}#[default] #[#{E:status-right-style}]#h [#S] #[fg=colour187,bold]%a %Y-%m-%d %H:%M"
set -g window-status-format " #[#{E:@window-index-style}]#I:#[#{E:window-status-style}] #W#F "
set -g window-status-current-format " #[#{E:@window-index-current-style}]#I:#[#{E:window-status-current-style}] #W#F "
set -g window-status-separator ""

# tmux plugin manager:
#   <space-I> to install plugins
#   <space-U> to update plugins
#   <space-alt-U> to remove unlisted plugins
# if "test ! -d $XDG_CONFIG_HOME/tmux/plugins/tpm"
if-shell "[ ! -d '$XDG_CONFIG_HOME/tmux/plugins/tpm' ]" {
    run-shell "git clone https://github.com/tmux-plugins/tpm $XDG_CONFIG_HOME/tmux/plugins/tpm"
}

# Configure extrakto
set -g @extrakto_key "tab"
set -g @extrakto_grab_area "full"
set -g @extrakto_filter_order "path all word line"
set -g @extrakto_popup_size "80%,60%"
set -g @extrakto_open_key "ctrl-o"
set -g @extrakto_copy_key "ctrl-y"   # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection
set -g @extrakto_filter_key "ctrl-r"
set -g @extrakto_fzf_layout "default"
set -g @extrakto_split_direction "p"
set -g @extrakto_fzf_unset_default_opts "true"

# List of plugins, tpm can manage itself
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'Morantron/tmux-fingers'

run -b '$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm'

# Install plugins if needed
if-shell "[ ! -d '$XDG_CONFIG_HOME/tmux/plugins/extrakto' ]" {
    run-shell '$XDG_CONFIG_HOME/tmux/plugins/tpm/bin/clean_plugins'
    run-shell '$XDG_CONFIG_HOME/tmux/plugins/tpm/bin/install_plugins'
}
